extends ../base

block mainContent
    .d-flex.flex-row.w-100(style="height: 87vh; overflow-y: hidden;")
        // Left side: Chat area
        .chat-side.bg-light.border-right.p-3.d-flex.flex-column.col-6.col-sm-4
            #chatContainer.flex-grow-1.overflow-auto
                .chat-messages

            form#chatForm.mt-3
                .input-group
                    input.form-control#userMessage(type="text" placeholder="メッセージを入力")
                    button.btn.btn-primary(type="submit") 送信

        // Right side: Editor with spinner
        .editor-side.flex-grow-1.p-3
            .text-center.mt-3#loadingSpinner(style="display:none;")
                .spinner-border(role="status")
                span.visually-hidden ローディング中

            textarea#blogContent(name="blogContent", rows="20", style="height:100%;").form-control

    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css")
    script(src="https://cdn.tiny.cloud/1/9t4li7yzu8rpqw0jc0ti8n8dqjmdq0kahece8yruouajveun/tinymce/7/tinymce.min.js" referrerpolicy="origin")
    script(src="https://cdn.jsdelivr.net/npm/marked/marked.min.js")
    script(src="https://code.jquery.com/jquery-3.6.0.min.js")

    script.
        tinymce.init({
            selector: '#blogContent',
            menubar: false,
            plugins: 'lists link image preview',
            toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | bullist numlist | removeformat',
            readonly: false
        });
    script.
        $(document).ready(function() {
            fetch('/api/blogeditor/init')
                .then(r => r.json())
                .then(data => {
                // Initialize chat messages
                if (data.messages && data.messages.length > 0) {
                    for (let m of data.messages) {
                    if (m.role === 'user') {
                        addUserMessage(m.content);
                    } else if (m.role === 'assistant') {
                        addAssistantMessage(m.content);
                    }
                    }
                    scrollChat();
                }

                // Initialize editor content
                if (data.content && data.content.trim() !== '') {
                    tinymce.get('blogContent').setContent(data.content, { format: 'html' });
                }
                })
                .catch(err => console.error('Error initializing:', err));
            });

    script.
        let assistantMessageElem = null;
        let isGenerating = false;

        function addUserMessage(msg) {
            $('#chatContainer .chat-messages').append($('<div class="user-message animate__animated animate__fadeInUp shadow-sm p-2 mb-2 bg-primary text-white rounded-pill"></div>').text(msg));
            scrollChat();
        }

        function addAssistantMessage(msg) {
            assistantMessageElem = $('<div class="assistant-message animate__animated animate__fadeInUp p-2 mb-2 bg-white text-dark rounded-pill"></div>').text(msg);
            $('#chatContainer .chat-messages').append(assistantMessageElem);
            scrollChat();
            return assistantMessageElem;
        }

        function scrollChat() {
            $('#chatContainer').animate({ scrollTop: $('#chatContainer')[0].scrollHeight }, 'fast');
        }

        function showLoading(show) {
            if (show) {
                $('#loadingSpinner').show();
                tinymce.get('blogContent').mode.set('readonly');
            } else {
                $('#loadingSpinner').hide();
                tinymce.get('blogContent').mode.set('design');
            }
        }

        $(document).on('submit', '#chatForm', function(e) {
            e.preventDefault();
            if (isGenerating) return;
            let message = $('#userMessage').val();
            if (!message.trim()) return;
            addUserMessage(message);
            $('#userMessage').val('');
            assistantMessageElem = addAssistantMessage('');
            isGenerating = true;
            $('#userMessage').prop('disabled', true);
            $('#chatForm button[type="submit"]').prop('disabled', true);
            showLoading(true);

            fetch('/api/blogeditor/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: message })
            }).then(response => {
                const reader = response.body.getReader();
                const decoder = new TextDecoder('utf-8');
                let doneReading = false;

                function readChunk() {
                    return reader.read().then(({ done, value }) => {
                        if (done || doneReading) {
                            updateEditorContent();
                            return;
                        }
                        const chunk = decoder.decode(value, { stream: true });
                        const lines = chunk.split('\n');
                        for (let line of lines) {
                            if (line.startsWith('data: ')) {
                                const dataStr = line.substring(6).trim();
                                if (dataStr === '[DONE]') {
                                    doneReading = true;
                                    continue;
                                }
                                const data = JSON.parse(dataStr);
                                if (data.content) assistantMessageElem.append(data.content);
                            }
                        }
                        return readChunk();
                    });
                }
                return readChunk();
            }).catch(err => {
                console.error(err);
                finishGenerating();
            });
        });

        function updateEditorContent() {
            let blogContent = tinymce.get('blogContent').getContent();
            fetch('/api/blogeditor/generateEditorContent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: blogContent })
            }).then(r => r.json())
            .then(editorData => {
                if (editorData.updateEditor) {
                    const htmlContent = marked.parse(editorData.editorContent);
                    tinymce.get('blogContent').setContent(htmlContent, { format: 'html' });
                }
                finishGenerating();
            }).catch(err => {
                console.error(err);
                finishGenerating();
            });
        }

        function finishGenerating() {
            isGenerating = false;
            $('#userMessage').prop('disabled', false);
            $('#chatForm button[type="submit"]').prop('disabled', false);
            showLoading(false);
        }
