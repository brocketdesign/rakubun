extends ../base

block mainContent
    .d-flex.flex-row.w-100(style="height: 87vh; overflow-y: hidden;")
        // Left side: Chat area
        .chat-side.bg-light.border-right.p-3.d-flex.flex-column.col-6.col-sm-4
            #chatContainer.flex-grow-1.overflow-auto
                .chat-messages

            form#chatForm.mt-3
                .input-group
                    input.form-control#userMessage(type="text" placeholder="メッセージを入力")
                    button.btn.btn-primary(type="submit") 送信

        // Right side: Editor with floating spinner
        .editor-side.flex-grow-1.p-0.shadow(position="relative")
            .editor-container.position-relative(position="relative" style="width:100%; height:100%;")
                #loadingSpinner(style="position: absolute; top: 0; left: 0; bottom: 0; z-index: 1000; display: none; right: 0; justify-content: center; align-items: center; justify-items: center;")
                    .spinner-border(role="status")
                    span.visually-hidden ローディング中

                textarea#blogContent(name="blogContent", rows="20", style="height:100%;").form-control

    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css")
    script(src="https://cdn.tiny.cloud/1/9t4li7yzu8rpqw0jc0ti8n8dqjmdq0kahece8yruouajveun/tinymce/7/tinymce.min.js" referrerpolicy="origin")
    script(src="https://cdn.jsdelivr.net/npm/marked/marked.min.js")
    script(src="https://code.jquery.com/jquery-3.6.0.min.js")
    script.
        function purifyEditorContent(content){
            if(content.includes('```markdown')){
                return content.replace('```markdown','').replace('```','')
            }else{
                return content
            }
        }
    script.
        tinymce.init({
            selector: '#blogContent',
            menubar: false,
            plugins: 'lists link image preview',
            toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | bullist numlist | removeformat',
            readonly: false,
            content_style: `
                body {
                    overflow-x: hidden !important;
                    overflow-y: auto !important;
                    word-wrap: break-word;
                }
            `,
            setup: function (editor) {
                editor.on('init', function () {
                    // Editor is fully initialized, fetch the content now
                    fetch('/api/blogeditor/init')
                        .then(r => r.json())
                        .then(data => {
                            // Initialize chat messages
                            if (data.messages && data.messages.length > 0) {
                                for (let m of data.messages) {
                                    if (m.role === 'user') {
                                        addUserMessage(m.content);
                                    } else if (m.role === 'assistant') {
                                        addAssistantMessage(m.content);
                                    }
                                }
                                scrollChat();
                            }

                            // Initialize editor content
                            if (data.content && data.content.trim() !== '') {
                                const purifyContent = purifyEditorContent(data.content)
                                const htmlContent = marked.parse(purifyContent);
                                editor.setContent(htmlContent, { format: 'html' });
                            }
                        })
                        .catch(err => console.error('Error initializing:', err));
                });
            }
        });


    script.
        let assistantMessageElem = null;
        let isGenerating = false;

        function addUserMessage(msg) {
            $('#chatContainer .chat-messages').append($('<div class="user-message animate__animated animate__fadeInUp shadow-sm p-2 mb-2 text-dark rounded-pill" style="background-color: #f3f3f3;"></div>').text(msg));
            scrollChat();
        }

        function addAssistantMessage(msg) {
            assistantMessageElem = $('<div class="assistant-message animate__animated animate__fadeInUp p-2 mb-2 bg-transparent text-dark rounded-pill"></div>').text(msg);
            $('#chatContainer .chat-messages').append(assistantMessageElem);
            scrollChat();
            return assistantMessageElem;
        }

        function scrollChat() {
            $('#chatContainer').animate({ scrollTop: $('#chatContainer')[0].scrollHeight }, 'fast');
        }

        function showLoading(show) {
            if (show) {
                $('#loadingSpinner').addClass('d-flex').show();
                tinymce.get('blogContent').mode.set('readonly');
            } else {
                $('#loadingSpinner').removeClass('d-flex').hide();
                tinymce.get('blogContent').mode.set('design');
            }
        }

        $(document).on('submit', '#chatForm', function(e) {
            e.preventDefault();
            if (isGenerating) return;
            let message = $('#userMessage').val();
            if (!message.trim()) return;
            addUserMessage(message);
            $('#userMessage').val('');
            assistantMessageElem = addAssistantMessage('');
            isGenerating = true;
            $('#userMessage').prop('disabled', true);
            $('#chatForm button[type="submit"]').prop('disabled', true);

            let blogContent = tinymce.get('blogContent').getContent();

            fetch('/api/blogeditor/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: message,  content: blogContent })
            }).then(response => {
                const reader = response.body.getReader();
                const decoder = new TextDecoder('utf-8');
                let doneReading = false;

                function readChunk() {
                    return reader.read().then(({ done, value }) => {
                        if (done || doneReading) {
                            finishGenerating();
                            return;
                        }
                        const chunk = decoder.decode(value, { stream: true });
                        const lines = chunk.split('\n');
                        for (let line of lines) {
                            if (line.startsWith('data: ')) {
                                const dataStr = line.substring(6).trim();
                                if (dataStr === '[DONE]') {
                                    doneReading = true;
                                    continue;
                                }
                                try {
                                    const data = JSON.parse(dataStr);
                                    if (data.type === 'text' && data.content) {
                                        assistantMessageElem.append(data.content);
                                    } else if (data.type === 'trigger') {
                                        handleTrigger(data.command);
                                    }
                                } catch (e) {
                                    console.error('JSON parse error', e, line);
                                }
                            }
                        }
                        return readChunk();
                    });
                }
                return readChunk();
            }).catch(err => {
                console.error(err);
                finishGenerating();
            });
        });

        function handleTrigger(command) {
            console.log({command})
            switch (command) {
                case 'editor':
                    // The frontend knows it should update the editor
                    // by calling /generateEditorContent
                    updateEditorContent();
                    break;
                case 'full':
                    getFullArticleInMarkdown();
                    break;
                case 'save':
                    // Already handled in server (saving)
                    break;
                case 'reset':
                    // Already handled in server (resetting)
                    resetChatAndEditor();
                    break;
            }
        }
        function resetChatAndEditor() {
            // Get the last chat message
            const lastMessage = $('#chatContainer .chat-messages').children().last();

            // Clear the chat messages container
            $('#chatContainer .chat-messages').empty();

            // Append the last message back if it exists
            if (lastMessage.length > 0) {
                $('#chatContainer .chat-messages').append(lastMessage);
            }

            // Reset the editor content to be empty
            if (tinymce.get('blogContent')) {
                tinymce.get('blogContent').setContent('');
            }

            // Optionally, reset any input fields in the chat form
            $('#userMessage').val('');

            // Log for debugging
            console.log('Chat messages and editor content have been reset, keeping the last message.');
        }

        function getFullArticleInMarkdown() {
            showLoading(true);
            fetch('/api/blogeditor/fullarticle', {
                method: 'GET',
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch article content');
                }
                return response.text(); // Process response as text
            })
            .then(articleContent => {
                tinymce.get('blogContent').setContent(articleContent, { format: 'html' }); // Set content in HTML format
                showLoading(false);
            })
            .catch(err => {
                console.error(err);
                showLoading(false);
            });
        }

        function updateEditorContent() {
            let blogContent = tinymce.get('blogContent').getContent();
            showLoading(true);
            fetch('/api/blogeditor/generateEditorContent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: blogContent })
            }).then(r => r.json())
            .then(editorData => {
                if (editorData.editorContent) {
                    const purifyContent = purifyEditorContent(editorData.editorContent)
                    const htmlContent = marked.parse(purifyContent);
                    tinymce.get('blogContent').setContent(htmlContent, { format: 'html' });
                    sendUpdateToStructure(JSON.parse(editorData.editorContent))
                }
                showLoading(false);
            }).catch(err => {
                console.error(err);
                showLoading(false);
            });
        }
        function sendUpdateToStructure(updates) {
            
            const sanitizedUpdates = Object.fromEntries(
                Object.entries(updates).filter(
                    ([key, value]) =>
                        value !== '' &&
                        value !== false &&
                        value !== 'false' &&
                        (!Array.isArray(value) || value.length > 0)
                )
            );

            if (Object.keys(sanitizedUpdates).length === 0) {
                console.warn('No valid updates to send.');
                return;
            }

            showLoading(true);

            fetch('/api/blogeditor/updateStructure', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ updates: sanitizedUpdates })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to update structure');
                }
                return response.json();
            })
            .then(data => {
                if (data.structure) {
                    console.log('Structure updated successfully:', data.structure);
                } else {
                    console.warn('No structure changes detected.');
                }
                showLoading(false);
            })
            .catch(err => {
                console.error('Error updating structure:', err);
                showLoading(false);
            });
        }


        function finishGenerating() {
            isGenerating = false;
            $('#userMessage').prop('disabled', false);
            $('#chatForm button[type="submit"]').prop('disabled', false);
        }
