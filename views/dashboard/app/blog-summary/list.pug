extends ../../base

block mainContent
    .container-fluid.px-0
        .row
            .col-12
                .d-flex.justify-content-between.align-items-center.mb-4
                    h1.mb-0
                        i.fas.fa-newspaper.me-2
                        | ブログ要約システム
                    .btn-group(role="group")
                        button.btn.btn-primary.shadow-none#systemPromptBtn
                            i.fas.fa-cog.me-2
                            | システムプロンプト設定
                        button.btn.btn-success.shadow-none#refreshAllBtn
                            i.fas.fa-sync-alt.me-2
                            | 全ブログ次記事

        .row.px-3.mt-4
            .col-md-12
                h4.mb-3.border-bottom.pb-2 登録ブログ一覧
                #blogListContainer.row
                    .col-12.text-center.py-5
                        .spinner-border.text-primary(role="status" style="width: 3rem; height: 3rem;")
                            span.visually-hidden 読み込み中...
                        p.mt-2.text-muted ブログ情報を読み込んでいます...

    // Scripts section
    script.
        $(document).ready(function() {
            console.log('[ブログ要約] ページ初期化開始');
            
            const user = !{JSON.stringify(user)};
            const isAdmin = !{JSON.stringify(isAdmin)};

            // 通知機能
            function showNotification(message, type, duration = 3000) {
                console.log(`[通知] ${type}: ${message}`);
                Swal.fire({
                    text: message,
                    icon: type,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: duration,
                    timerProgressBar: true,
                    customClass: {
                        popup: 'swal2-custom-notification'
                    }
                });
            }

            // Register WebSocket message handlers for blog-summary
            registerMessageHandler('blog-summary-progress', function(data) {
                updateProgressBar(data.blogId, data.progress, data.message);
            });
            
            registerMessageHandler('blog-summary-complete', function(data) {
                handleSummaryComplete(data.blogId, data.result);
            });
            
            registerMessageHandler('blog-summary-error', function(data) {
                handleSummaryError(data.blogId, data.error);
            });

            // Cleanup handlers when page unloads
            $(window).on('beforeunload', function() {
                unregisterMessageHandler('blog-summary-progress');
                unregisterMessageHandler('blog-summary-complete');
                unregisterMessageHandler('blog-summary-error');
            });

            // ブログリスト取得
            function fetchUserBlogs() {
                console.log('[API] ブログリスト取得開始');
                $('#blogListContainer').html(`
                    <div class="col-12 text-center py-5">
                        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">読み込み中...</span>
                        </div>
                        <p class="mt-2 text-muted">ブログ情報を読み込んでいます...</p>
                    </div>
                `);

                $.ajax({
                    url: '/api/blog-summary/user-blogs',
                    method: 'GET',
                    success: function(blogs) {
                        console.log('[API] ブログリスト取得成功:', blogs);
                        $('#blogListContainer').empty();
                        
                        if (blogs && blogs.length > 0) {
                            blogs.forEach(function(blog) {
                                const lastSummaryText = blog.lastSummaryDate ? 
                                    new Date(blog.lastSummaryDate).toLocaleString('ja-JP') : '未実行';
                                
                                const summarySettings = blog.summarySettings || {};
                                const positionText = summarySettings.position === 'top' ? '記事上部' : 
                                                   summarySettings.position === 'bottom' ? '記事下部' : '設定なし';
                                
                                const cronStatus = blog.cronEnabled ? 
                                    `<span class="badge bg-success">有効 (${blog.cronFrequency || '未設定'})</span>` :
                                    `<span class="badge bg-secondary">無効</span>`;

                                const blogCardHtml = `
                                    <div class="col-md-6 col-lg-4 mb-4">
                                        <div class="card h-100 shadow-sm blog-card" data-blog-id="${blog._id}">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <div class="d-flex align-items-center">
                                                    <img src="${blog.favicon || '/img/logo.png'}" class="me-2" style="width: 24px; height: 24px;">
                                                    <h6 class="mb-0 fw-bold">${blog.blogName}</h6>
                                                </div>
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                        <i class="fas fa-ellipsis-v"></i>
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end">
                                                        <li><a class="dropdown-item settings-btn" href="#" data-blog-id="${blog._id}">
                                                            <i class="fas fa-cog me-2"></i>設定
                                                        </a></li>
                                                        <li><a class="dropdown-item" href="${blog.blogUrl}" target="_blank">
                                                            <i class="fas fa-external-link-alt me-2"></i>ブログを開く
                                                        </a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <small class="text-muted">要約位置:</small>
                                                    <span class="badge bg-info">${positionText}</span>
                                                </div>
                                                <div class="mb-3">
                                                    <small class="text-muted">自動実行:</small>
                                                    ${cronStatus}
                                                </div>
                                                <div class="mb-3">
                                                    <small class="text-muted">最終実行:</small>
                                                    <div class="text-secondary">${lastSummaryText}</div>
                                                </div>
                                                <div class="progress mb-3" style="height: 8px; display: none;" id="progress-${blog._id}">
                                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                                         role="progressbar" style="width: 0%" id="progress-bar-${blog._id}">
                                                    </div>
                                                </div>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-primary btn-sm manual-summary-btn flex-fill" data-blog-id="${blog._id}">
                                                        <i class="fas fa-play me-1"></i>次の記事
                                                    </button>
                                                    <button class="btn btn-outline-secondary btn-sm view-posts-btn" data-blog-id="${blog._id}">
                                                        <i class="fas fa-list me-1"></i>記事
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `;
                                $('#blogListContainer').append(blogCardHtml);
                            });
                        } else {
                            $('#blogListContainer').html(`
                                <div class="col-12">
                                    <div class="alert alert-warning text-center">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        登録されているブログがありません。まず「自動ブログ」アプリでブログを登録してください。
                                        <a href="/dashboard/app/autoblog" class="btn btn-sm btn-outline-primary ms-2">自動ブログへ</a>
                                    </div>
                                </div>
                            `);
                        }
                    },
                    error: function(xhr) {
                        console.error('[API] ブログリスト取得エラー:', xhr.responseText);
                        $('#blogListContainer').html(`
                            <div class="col-12">
                                <div class="alert alert-danger text-center">
                                    <i class="fas fa-times-circle me-2"></i>
                                    ブログ情報の読み込みに失敗しました。ページを再読み込みしてみてください。
                                </div>
                            </div>
                        `);
                        showNotification('ブログ情報の読み込みに失敗しました。', 'error');
                    }
                });
            }

            // プログレスバー更新
            function updateProgressBar(blogId, progress, message) {
                console.log(`[プログレス] ブログ${blogId}: ${progress}% - ${message}`);
                const progressContainer = $(`#progress-${blogId}`);
                const progressBar = $(`#progress-bar-${blogId}`);
                
                if (progress > 0) {
                    progressContainer.show();
                    progressBar.css('width', `${progress}%`);
                    progressBar.text(`${progress}%`);
                } else {
                    progressContainer.hide();
                }
                
                if (message) {
                    showNotification(`${message}`, 'info', 2000);
                }
            }

            // 要約完了処理
            function handleSummaryComplete(blogId, result) {
                console.log(`[完了] ブログ${blogId}の要約完了:`, result);
                updateProgressBar(blogId, 0, '');
                
                let message = '';
                if (result.processedPost) {
                    message = `記事「${result.processedPost}」の要約が完了しました`;
                } else if (result.message) {
                    message = result.message;
                } else {
                    message = `${result.processedCount}件の記事を処理しました`;
                }
                
                showNotification(message, 'success');
                fetchUserBlogs(); // リスト更新
            }

            // 要約エラー処理
            function handleSummaryError(blogId, error) {
                console.error(`[エラー] ブログ${blogId}の要約エラー:`, error);
                updateProgressBar(blogId, 0, '');
                showNotification(`要約処理でエラーが発生しました: ${error}`, 'error');
            }

            // システムプロンプト設定
            $('#systemPromptBtn').on('click', function() {
                console.log('[設定] システムプロンプト設定画面表示');
                Swal.fire({
                    title: 'システムプロンプト設定',
                    html: `
                        <div class="text-start">
                            <div class="form-group mb-3">
                                <label class="form-label fw-bold">要約生成プロンプト</label>
                                <textarea id="summaryPrompt" class="form-control" rows="8" 
                                         placeholder="記事を要約するためのプロンプトを入力してください..."></textarea>
                                <small class="form-text text-muted">
                                    このプロンプトはシステムメッセージとして使用されます。記事のタイトルと内容は自動的にユーザーメッセージとして送信されます。
                                </small>
                            </div>
                        </div>
                    `,
                    width: '600px',
                    showCancelButton: true,
                    confirmButtonText: '保存',
                    cancelButtonText: 'キャンセル',
                    preConfirm: () => {
                        const prompt = document.getElementById('summaryPrompt').value.trim();
                        if (!prompt) {
                            Swal.showValidationMessage('プロンプトを入力してください');
                            return false;
                        }
                        return { prompt };
                    },
                    didOpen: () => {
                        // 現在の設定を取得
                        $.ajax({
                            url: '/api/blog-summary/system-prompt',
                            method: 'GET',
                            success: function(data) {
                                $('#summaryPrompt').val(data.prompt || '');
                            }
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/api/blog-summary/system-prompt',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(result.value),
                            success: function() {
                                showNotification('システムプロンプトを保存しました', 'success');
                            },
                            error: function() {
                                showNotification('システムプロンプトの保存に失敗しました', 'error');
                            }
                        });
                    }
                });
            });

            // 手動要約実行
            $(document).on('click', '.manual-summary-btn', function() {
                const blogId = $(this).data('blog-id');
                console.log(`[手動実行] ブログ${blogId}の手動要約開始`);
                
                const button = $(this);
                button.prop('disabled', true);
                button.html('<i class="fas fa-spinner fa-spin me-1"></i>実行中...');
                
                $.ajax({
                    url: '/api/blog-summary/manual-run',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ blogId }),
                    success: function(response) {
                        console.log('[手動実行] 開始成功:', response);
                        showNotification('次の記事の要約処理を開始しました', 'success');
                    },
                    error: function(xhr) {
                        console.error('[手動実行] エラー:', xhr.responseText);
                        showNotification('要約処理の開始に失敗しました', 'error');
                    },
                    complete: function() {
                        button.prop('disabled', false);
                        button.html('<i class="fas fa-play me-1"></i>次の記事');
                    }
                });
            });

            // ブログ設定
            $(document).on('click', '.settings-btn', function(e) {
                e.preventDefault();
                const blogId = $(this).data('blog-id');
                console.log(`[設定] ブログ${blogId}の設定画面表示`);
                
                Swal.fire({
                    title: 'ブログ要約設定',
                    html: `
                        <div class="text-start">
                            <div class="form-group mb-3">
                                <label class="form-label fw-bold">要約の挿入位置</label>
                                <select id="summaryPosition" class="form-select">
                                    <option value="top">記事の上部</option>
                                    <option value="bottom">記事の下部</option>
                                </select>
                            </div>
                            <div class="form-group mb-3">
                                <label class="form-label fw-bold">自動実行設定</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="cronEnabled">
                                    <label class="form-check-label" for="cronEnabled">
                                        自動要約を有効にする
                                    </label>
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                <label class="form-label fw-bold">実行頻度</label>
                                <select id="cronFrequency" class="form-select">
                                    <option value="hourly">1時間毎</option>
                                    <option value="daily">1日毎</option>
                                    <option value="weekly">1週間毎</option>
                                </select>
                            </div>
                        </div>
                    `,
                    width: '500px',
                    showCancelButton: true,
                    confirmButtonText: '保存',
                    cancelButtonText: 'キャンセル',
                    preConfirm: () => {
                        return {
                            position: document.getElementById('summaryPosition').value,
                            cronEnabled: document.getElementById('cronEnabled').checked,
                            cronFrequency: document.getElementById('cronFrequency').value
                        };
                    },
                    didOpen: () => {
                        // 現在の設定を取得
                        $.ajax({
                            url: `/api/blog-summary/settings/${blogId}`,
                            method: 'GET',
                            success: function(data) {
                                $('#summaryPosition').val(data.position || 'top');
                                $('#cronEnabled').prop('checked', data.cronEnabled || false);
                                $('#cronFrequency').val(data.cronFrequency || 'daily');
                            }
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: `/api/blog-summary/settings/${blogId}`,
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(result.value),
                            success: function() {
                                showNotification('設定を保存しました', 'success');
                                fetchUserBlogs();
                            },
                            error: function() {
                                showNotification('設定の保存に失敗しました', 'error');
                            }
                        });
                    }
                });
            });

            // 記事一覧表示
            $(document).on('click', '.view-posts-btn', function() {
                const blogId = $(this).data('blog-id');
                console.log(`[記事一覧] ブログ${blogId}の記事一覧表示`);
                
                $.ajax({
                    url: `/api/blog-summary/posts/${blogId}`,
                    method: 'GET',
                    success: function(posts) {
                        let postsHtml = '<div class="list-group" style="max-height: 400px; overflow-y: auto;">';
                        
                        if (posts && posts.length > 0) {
                            posts.forEach(post => {
                                const summaryStatus = post.hasSummary ? 
                                    '<span class="badge bg-success">要約済み</span>' :
                                    '<span class="badge bg-secondary">未処理</span>';
                                
                                postsHtml += `
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <h6 class="mb-1">${post.title}</h6>
                                                <small class="text-muted">${new Date(post.date).toLocaleDateString('ja-JP')}</small>
                                            </div>
                                            <div class="text-end">
                                                ${summaryStatus}
                                                <br>
                                                <button class="btn btn-sm btn-outline-primary mt-1 manual-post-summary-btn" 
                                                        data-post-id="${post.id}" data-blog-id="${blogId}">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            });
                        } else {
                            postsHtml += '<div class="list-group-item text-center text-muted">記事が見つかりません</div>';
                        }
                        
                        postsHtml += '</div>';
                        
                        Swal.fire({
                            title: '記事一覧',
                            html: postsHtml,
                            width: '700px',
                            showCloseButton: true,
                            showConfirmButton: false
                        });
                    },
                    error: function() {
                        showNotification('記事の取得に失敗しました', 'error');
                    }
                });
            });

            // 個別記事の手動要約
            $(document).on('click', '.manual-post-summary-btn', function() {
                const postId = $(this).data('post-id');
                const blogId = $(this).data('blog-id');
                console.log(`[個別要約] 記事${postId}の手動要約開始`);
                
                const button = $(this);
                button.prop('disabled', true);
                button.html('<i class="fas fa-spinner fa-spin"></i>');
                
                $.ajax({
                    url: '/api/blog-summary/manual-post',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ blogId, postId }),
                    success: function() {
                        showNotification('記事の要約を開始しました', 'success');
                        button.closest('.list-group-item').find('.badge').removeClass('bg-secondary').addClass('bg-warning').text('処理中');
                    },
                    error: function() {
                        showNotification('記事の要約開始に失敗しました', 'error');
                    },
                    complete: function() {
                        button.prop('disabled', false);
                        button.html('<i class="fas fa-play"></i>');
                    }
                });
            });

            // 全ブログ更新
            $('#refreshAllBtn').on('click', function() {
                console.log('[全更新] 全ブログの要約実行開始');
                
                const button = $(this);
                button.prop('disabled', true);
                button.html('<i class="fas fa-spinner fa-spin me-2"></i>実行中...');
                
                $.ajax({
                    url: '/api/blog-summary/refresh-all',
                    method: 'POST',
                    success: function(response) {
                        console.log('[全更新] 開始成功:', response);
                        showNotification('全ブログで次の記事の要約処理を開始しました', 'success');
                    },
                    error: function(xhr) {
                        console.error('[全更新] エラー:', xhr.responseText);
                        showNotification('全ブログの要約処理開始に失敗しました', 'error');
                    },
                    complete: function() {
                        button.prop('disabled', false);
                        button.html('<i class="fas fa-sync-alt me-2"></i>全ブログ次記事');
                    }
                });
            });

            // 初期化
            fetchUserBlogs();
            
            console.log('[ブログ要約] ページ初期化完了');
        });

    style.
        .blog-card {
            transition: transform 0.2s ease;
        }
        
        .blog-card:hover {
            transform: translateY(-2px);
        }
        
        .swal2-custom-notification {
            font-size: 0.9rem;
        }
        
        .badge {
            font-size: 0.75rem;
        }
        
        .progress-bar {
            font-size: 0.7rem;
        }
