extends ../../base

block mainContent
    .container-fluid.px-0
        .d-flex.justify-content-between.align-items-center.px-3.pt-3
            div
                h1.my-0 トレンド自動ブログ設定
                p.text-muted.mb-0 Googleトレンドに基づいて、選択したブログに自動で記事を投稿します。
            div
                // Maybe a general help button or info icon here
                // i.fas.fa-info-circle.text-muted(data-bs-toggle="tooltip" title="各ブログのトレンドキーワードや、記事生成に使用するAIモデルの設定を行ってください。")

        // User Guide / Explanation
        .alert.alert-info.mx-3.mt-3(role="alert")
            i.fas.fa-info-circle.me-2
            strong ご利用方法：
            ol.mb-0.ps-4
                li 下記に表示されているご自身のブログを選択してください。
                li 各ブログの「トレンド設定」ボタンから、追跡したいGoogleトレンドのキーワードを設定します。
                li 「AI設定」ボタンから、記事生成に使用する言語、トーン、記事テンプレートをカスタマイズします。
                li 設定が完了すると、システムが定期的にトレンドをチェックし、関連性の高いトピックで「gpt-4o」モデルを使用して記事を自動生成・投稿します。
            small.d-block.mt-2 ※ 事前に「自動ブログ」アプリでブログが登録されている必要があります。

        // Blog List Area
        .row.px-3.mt-4
            .col-md-12
                h4.mb-3.border-bottom.pb-2 登録ブログ一覧
                #blogListContainer.row
                    // Blogs will be loaded here by JavaScript

    // Scripts section
    script.
        $(document).ready(function() {
            const user = !{JSON.stringify(user)};
            const isAdmin = !{JSON.stringify(isAdmin)};

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })

            function showNotification(message, type, duration = 3000) {
                Swal.fire({
                    text: message,
                    icon: type,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: duration,
                    timerProgressBar: true,
                    customClass: {
                        popup: 'swal2-custom-notification'
                    }
                });
            }

            function fetchUserBlogs() {
                $('#blogListContainer').html(`
                    <div class="col-12 text-center py-5">
                        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">読み込み中...</span>
                        </div>
                        <p class="mt-2 text-muted">ブログ情報を読み込んでいます...</p>
                    </div>
                `);
                $.ajax({
                    url: '/api/autoblog/user-blogs', // This endpoint should also return trend/model settings for each blog
                    method: 'GET',
                    success: function(blogs) {
                        $('#blogListContainer').empty();
                        if (blogs && blogs.length > 0) {
                            blogs.forEach(function(blog) {
                                const trendKeywordsDisplay = blog.trendKeywords && blog.trendKeywords.length > 0 ? blog.trendKeywords.join(', ') : '未設定';
                                const modelLanguageDisplay = blog.trendModelSettings && blog.trendModelSettings.language ? blog.trendModelSettings.language : '未設定';
                                const modelToneDisplay = blog.trendModelSettings && blog.trendModelSettings.tone ? blog.trendModelSettings.tone : '未設定';

                                const blogCardHtml = `
                                    <div class="col-md-6 col-lg-4 mb-4">
                                        <div class="card h-100 shadow-sm">
                                            <div class="card-header bg-light py-2 px-3">
                                                <h5 class="card-title mb-0 d-flex align-items-center">
                                                    ${blog.blogName || 'ブログ名不明'}
                                                </h5>
                                            </div>
                                            <div class="card-body d-flex flex-column">
                                                ${ blog.blogUrl ? `<p class="card-text small text-muted mb-2"><i class="fas fa-link me-1"></i> <a href="${blog.blogUrl}" target="_blank" rel="noopener noreferrer">${blog.blogUrl}</a></p>` : ''}
                                                <p class="card-text small mb-1" title="設定されているトレンドキーワード">
                                                    <i class="fas fa-tags me-1 text-primary"></i><strong>トレンド:</strong> ${trendKeywordsDisplay}
                                                </p>
                                                <p class="card-text small mb-1" title="設定されているAI言語">
                                                    <i class="fas fa-language me-1 text-info"></i><strong>AI言語:</strong> ${modelLanguageDisplay}
                                                </p>
                                                <p class="card-text small" title="設定されているAIトーン">
                                                    <i class="fas fa-microphone-alt me-1 text-info"></i><strong>AIトーン:</strong> ${modelToneDisplay}
                                                </p>

                                                <div class="mt-auto pt-3 border-top">
                                                    <div class="btn-group w-100 mb-2">
                                                        <button class="btn btn-sm btn-outline-primary trend-settings-btn" data-blog-id="${blog._id}" data-blog-name="${blog.blogName}">
                                                            <i class="fas fa-cogs me-1"></i>トレンド設定
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-info model-settings-btn" data-blog-id="${blog._id}" data-blog-name="${blog.blogName}">
                                                            <i class="fas fa-robot me-1"></i>AI設定
                                                        </button>
                                                    </div>
                                                    <div class="btn-group w-100">
                                                        <button class="btn btn-sm btn-outline-secondary fetch-matched-trends-btn" data-blog-id="${blog._id}" data-blog-name="${blog.blogName}">
                                                            <i class="fas fa-history me-1"></i>キャッシュ表示
                                                        </button>
                                                        <button class="btn btn-sm btn-warning force-analysis-btn" data-blog-id="${blog._id}" data-blog-name="${blog.blogName}">
                                                            <i class="fas fa-sync-alt me-1"></i>強制再分析
                                                        </button>
                                                        <button class="btn btn-sm btn-danger clear-cached-analysis-btn" data-blog-id="${blog._id}" data-blog-name="${blog.blogName}">
                                                            <i class="fas fa-trash-alt me-1"></i>キャッシュ削除
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `;
                                $('#blogListContainer').append(blogCardHtml);
                            });
                        } else {
                            $('#blogListContainer').html(`
                                <div class="col-12">
                                    <div class="alert alert-warning text-center">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        登録されているブログがありません。まず「自動ブログ」アプリでブログを登録してください。
                                        <a href="/dashboard/app/autoblog" class="btn btn-sm btn-outline-primary ms-2">自動ブログへ</a>
                                    </div>
                                </div>
                            `);
                        }
                    },
                    error: function(xhr) {
                        $('#blogListContainer').html(`
                            <div class="col-12">
                                <div class="alert alert-danger text-center">
                                    <i class="fas fa-times-circle me-2"></i>
                                    ブログ情報の読み込みに失敗しました。ページを再読み込みしてみてください。
                                </div>
                            </div>
                        `);
                        showNotification('ブログ情報の読み込みに失敗しました。', 'error');
                        console.error("Error fetching user blogs:", xhr.responseText);
                    }
                });
            }

            fetchUserBlogs();

            // WebSocket connection
            let ws;
            function connectWebSocket() {
                const protocol = window.location.protocol === 'https' ? 'wss' : 'ws';
                const wsUrl = `${protocol}://${window.location.host}/ws?userId=${user._id}`;
                ws = new WebSocket(wsUrl);

                ws.onopen = function() {
                    console.log('WebSocket connection established');
                    showNotification('リアルタイム更新に接続しました。', 'info', 1500);
                };

                ws.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);
                        if (data.type === 'ping') return; // Ignore pings

                        console.log('WebSocket message received:', data);
                        if (data.notification) {
                            handleTrendAnalysisNotification(data.notification);
                        }
                    } catch (e) {
                        console.error('Error processing WebSocket message:', e);
                    }
                };

                ws.onclose = function() {
                    console.log('WebSocket connection closed. Attempting to reconnect...');
                    showNotification('リアルタイム更新から切断されました。再接続試みます。', 'warning', 2000);
                    setTimeout(connectWebSocket, 5000); // Attempt to reconnect every 5 seconds
                };

                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                    ws.close(); // This will trigger onclose and attempt reconnection
                };
            }

            if (user && user._id) {
                connectWebSocket();
            }

            let analysisModalInstance = null;
            const analyzedTrendsInModal = new Map(); // To store trend results for the current modal session

            function handleTrendAnalysisNotification(notification) {
                const { type, blogId, trendName, analysis, isRelevant, tweetCount, scrapedAt, count, allMatches, message } = notification;

                // Check if a modal is currently open using Swal.isVisible()
                if (!analysisModalInstance || !Swal.isVisible()) return; // Modal not open
                
                // Get the currently active modal content
                const modalContent = Swal.getHtmlContainer();
                if (!modalContent) return;
                
                // Try to find the blog name in the modal title
                const modalTitle = Swal.getTitle();
                if (!modalTitle) return;
                
                // Check if this notification is for the blog currently being displayed in the modal
                try {
                    const blogElement = document.querySelector(`.fetch-matched-trends-btn[data-blog-id="${blogId}"]`);
                    if (!blogElement || !modalTitle.textContent.includes(blogElement.dataset.blogName)) return;
                } catch (e) {
                    console.error("Error checking blog name in notification:", e);
                    return;
                }

                // Get references to the elements inside the modal
                const statusEl = modalContent.querySelector('#analysisStatus');
                const resultsContainerEl = modalContent.querySelector('#analysisResultsContainer');
                const overallProgressEl = modalContent.querySelector('#overallProgress');

                switch (type) {
                    case 'trend_analysis_start':
                        if (statusEl) statusEl.innerHTML = `<i class="fas fa-spinner fa-spin me-2"></i>トレンド「<strong>${trendName}</strong>」を分析中...`;
                        break;
                        
                    case 'trend_analysis_result':
                        if (resultsContainerEl) {
                            let existingTrendEl = resultsContainerEl.querySelector(`.trend-result-item[data-trend-name="${trendName}"]`);
                            if (existingTrendEl) { // Update if already exists (e.g. if we allow re-analysis)
                                existingTrendEl.remove(); 
                            }

                            const scoreText = analysis && typeof analysis.relevance_score === 'number' ? analysis.relevance_score.toFixed(2) : 'N/A';
                            const reasoningText = analysis && analysis.reasoning ? analysis.reasoning : '理由不明';
                            const angleText = analysis && analysis.suggested_angle ? analysis.suggested_angle : '';
                            const tweetCountDisplay = tweetCount ? `${tweetCount} ツイート` : 'ツイート数不明';
                            const scrapedAtDisplay = new Date(scrapedAt).toLocaleString('ja-JP');

                            const resultClass = isRelevant ? 'border-success text-success-emphasis' : 'border-muted text-muted';
                            const icon = isRelevant ? '<i class="fas fa-check-circle text-success me-2"></i>' : '<i class="fas fa-times-circle text-danger me-2"></i>';

                            const trendHtml = `
                                <div class="list-group-item trend-result-item ${resultClass}" data-trend-name="${trendName}" style="opacity:0; transform: translateY(20px); transition: opacity 0.5s ease, transform 0.5s ease;">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">${icon}<strong>${trendName}</strong></h6>
                                        ${isRelevant ? `<span class="badge bg-success-subtle text-success-emphasis rounded-pill">関連スコア: ${scoreText}</span>` : `<span class="badge bg-secondary-subtle text-secondary-emphasis rounded-pill">スコア: ${scoreText}</span>`}
                                    </div>
                                    <small class="d-block mb-1 text-body-secondary">${tweetCountDisplay} - ${scrapedAtDisplay}</small>
                                    <p class="mb-1 small fst-italic text-body-secondary">${reasoningText}</p>
                                    ${angleText ? `<p class="mb-0 small"><strong class="text-info-emphasis">提案:</strong> ${angleText}</p>` : ''}
                                </div>
                            `;
                            resultsContainerEl.insertAdjacentHTML('afterbegin', trendHtml); // Add new results at the top
                            
                            // Fix: querySelector for the newly inserted element instead of using firstChild
                            setTimeout(() => {
                                const newEl = resultsContainerEl.querySelector(`.trend-result-item[data-trend-name="${trendName}"]`);
                                if (newEl) {
                                   newEl.style.opacity = '1';
                                   newEl.style.transform = 'translateY(0px)';
                                }
                            }, 50); // Delay for CSS transition
                        }
                        break;
                    case 'trend_analysis_complete':
                        if (statusEl) statusEl.innerHTML = `<i class="fas fa-check-circle text-success me-2"></i>分析完了！ ${count}件の関連トレンドが見つかりました。`;
                        if (overallProgressEl) overallProgressEl.style.width = '100%';
                        analysisModalInstance.update({
                            showConfirmButton: true,
                            confirmButtonText: '閉じる'
                        });
                        // If allMatches are sent, you could populate a final summary here, but the current design adds them one by one.
                        if (count === 0 && resultsContainerEl && resultsContainerEl.childElementCount === 0) {
                             resultsContainerEl.innerHTML = '<div class="alert alert-warning text-center mt-3"><i class="fas fa-info-circle me-2"></i>' + (message || '関連するトレンドは見つかりませんでした。') + '</div>';
                        }
                        break;
                    case 'trend_analysis_error':
                        if (statusEl) statusEl.innerHTML = `<i class="fas fa-exclamation-triangle text-danger me-2"></i>エラー: ${message}`;
                        analysisModalInstance.update({
                            showConfirmButton: true,
                            confirmButtonText: '閉じる'
                        });
                        break;
                }
            }

            // Trend Settings Modal
            $(document).on('click', '.trend-settings-btn', function() {
                const blogId = $(this).data('blog-id');
                const blogName = $(this).data('blog-name');

                // Show loading state in modal
                Swal.fire({
                    title: `${blogName} - トレンドキーワード設定`,
                    html: '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">読み込み中...</span></div><p class="mt-2">設定を読み込んでいます...</p></div>',
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    didOpen: () => {
                        // Fetch existing settings
                        $.ajax({
                            url: `/api/trendautoblog/settings/${blogId}`, // New endpoint to get settings for a specific blog
                            method: 'GET',
                            success: function(settings) {
                                const currentKeywords = settings && settings.trendKeywords ? settings.trendKeywords.join(', ') : '';
                                Swal.update({
                                    html: `
                                        <p class="text-muted small mb-3 text-start">このブログで追跡するGoogleトレンドのキーワードを入力してください。定期的にこれらのキーワードでトレンドを検索し、関連する記事を生成します。</p>
                                        <div id="trendKeywordsForm" class="text-start">
                                            <input type="hidden" name="blogId" value="${blogId}">
                                            <div class="form-group">
                                                <label for="trend_keywords" class="form-label fw-bold">トレンドキーワード:</label>
                                                <textarea id="trend_keywords" name="keywords" class="form-control" rows="4" placeholder="例: AI技術, 最新ガジェット, 健康食品">${currentKeywords}</textarea>
                                                <small class="form-text text-muted">複数のキーワードはカンマ（,）で区切って入力してください。</small>
                                            </div>
                                        </div>`,
                                    confirmButtonText: '保存する <i class="fas fa-save ms-1"></i>',
                                    showConfirmButton: true,
                                    showCancelButton: true,
                                    cancelButtonText: 'キャンセル',
                                    focusConfirm: false,
                                    preConfirm: () => {
                                        const keywords = Swal.getPopup().querySelector('#trend_keywords').value.trim();
                                        if (!keywords) {
                                            Swal.showValidationMessage(`キーワードを入力してください`);
                                            return false;
                                        }
                                        return { blogId: blogId, keywords: keywords };
                                    }
                                });
                            },
                            error: function() {
                                Swal.fire('エラー', '設定の読み込みに失敗しました。', 'error');
                            }
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: '保存中...',
                            html: '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">保存中...</span></div>',
                            allowOutsideClick: false,
                            showConfirmButton: false,
                            didOpen: () => {
                                $.ajax({
                                    url: '/api/trendautoblog/settings/trends',
                                    method: 'POST',
                                    contentType: 'application/json',
                                    data: JSON.stringify(result.value),
                                    success: function() {
                                        showNotification('トレンドキーワードを保存しました。', 'success');
                                        fetchUserBlogs(); // Refresh blog list to show updated info
                                        Swal.close();
                                    },
                                    error: function() {
                                        Swal.fire('エラー', 'トレンドキーワードの保存に失敗しました。', 'error');
                                    }
                                });
                            }
                        });
                    }
                });
            });

            // Model Settings Modal
            $(document).on('click', '.model-settings-btn', function() {
                const blogId = $(this).data('blog-id');
                const blogName = $(this).data('blog-name');

                Swal.fire({
                    title: `${blogName} - AIモデル設定`,
                    html: '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">読み込み中...</span></div><p class="mt-2">設定を読み込んでいます...</p></div>',
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    didOpen: () => {
                        $.ajax({
                            url: `/api/trendautoblog/settings/${blogId}`, // Reuse endpoint or create specific one
                            method: 'GET',
                            success: function(settings) {
                                const modelSettings = settings && settings.trendModelSettings ? settings.trendModelSettings : {};
                                const currentLanguage = modelSettings.language || 'japanese';
                                const currentTone = modelSettings.tone || 'Informative';
                                const currentTemplate = modelSettings.template || '';

                                Swal.update({
                                    html: `
                                        <p class="text-muted small mb-3 text-start">記事生成に使用するAIモデル（gpt-4o）の言語、トーン、記事テンプレートを設定します。</p>
                                        <div id="modelSettingsForm" class="text-start">
                                            <input type="hidden" name="blogId" value="${blogId}">
                                            <div class="form-group mb-3">
                                                <label for="model_language" class="form-label fw-bold">記事の言語:</label>
                                                <select id="model_language" name="language" class="form-select">
                                                    <option value="japanese" ${currentLanguage === 'japanese' ? 'selected' : ''}>日本語</option>
                                                    <option value="english" ${currentLanguage === 'english' ? 'selected' : ''}>English</option>
                                                    <option value="spanish" ${currentLanguage === 'spanish' ? 'selected' : ''}>Español</option>
                                                    <option value="french" ${currentLanguage === 'french' ? 'selected' : ''}>Français</option>
                                                    <option value="german" ${currentLanguage === 'german' ? 'selected' : ''}>Deutsch</option>
                                                    <option value="chinese" ${currentLanguage === 'chinese' ? 'selected' : ''}>中文</option>
                                                    <option value="korean" ${currentLanguage === 'korean' ? 'selected' : ''}>한국어</option>
                                                </select>
                                            </div>
                                            <div class="form-group mb-3">
                                                <label for="model_tone" class="form-label fw-bold">記事のトーン:</label>
                                                <select id="model_tone" name="tone" class="form-select">
                                                    <option value="Informative" ${currentTone === 'Informative' ? 'selected' : ''}>Informative (情報提供型)</option>
                                                    <option value="Casual" ${currentTone === 'Casual' ? 'selected' : ''}>Casual (カジュアル)</option>
                                                    <option value="Formal" ${currentTone === 'Formal' ? 'selected' : ''}>Formal (フォーマル)</option>
                                                    <option value="Witty" ${currentTone === 'Witty' ? 'selected' : ''}>Witty (機知に富んだ)</option>
                                                    <option value="Persuasive" ${currentTone === 'Persuasive' ? 'selected' : ''}>Persuasive (説得力のある)</option>
                                                    <option value="Friendly" ${currentTone === 'Friendly' ? 'selected' : ''}>Friendly (親しみやすい)</option>
                                                    <option value="Professional" ${currentTone === 'Professional' ? 'selected' : ''}>Professional (専門的)</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="model_template" class="form-label fw-bold">記事テンプレート (任意):</label>
                                                <textarea id="model_template" name="template" class="form-control" rows="5" placeholder="例: ## {{TREND_NAME}}\\n\\n### 導入\\n記事の導入部分。\\n\\n### {{SUGGESTED_ANGLE}}\\n提案された視点について詳述。\\n\\n### まとめ\\n記事のまとめ。">${currentTemplate}</textarea>
                                                <small class="form-text text-muted">記事の基本構造を定義します。<code>{{TREND_NAME}}</code>, <code>{{SUGGESTED_ANGLE}}</code>, <code>{{REASONING}}</code> などのプレースホルダを使用できます。</small>
                                            </div>
                                        </div>`,
                                    confirmButtonText: '保存する <i class="fas fa-save ms-1"></i>',
                                    showConfirmButton: true,
                                    showCancelButton: true,
                                    cancelButtonText: 'キャンセル',
                                    focusConfirm: false,
                                    width: '700px',
                                    preConfirm: () => {
                                        const language = Swal.getPopup().querySelector('#model_language').value;
                                        const tone = Swal.getPopup().querySelector('#model_tone').value;
                                        const template = Swal.getPopup().querySelector('#model_template').value.trim();
                                        return { blogId: blogId, language: language, tone: tone, template: template };
                                    }
                                });
                            },
                            error: function() {
                                Swal.fire('エラー', '設定の読み込みに失敗しました。', 'error');
                            }
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                         Swal.fire({
                            title: '保存中...',
                            html: '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">保存中...</span></div>',
                            allowOutsideClick: false,
                            showConfirmButton: false,
                            didOpen: () => {
                                $.ajax({
                                    url: '/api/trendautoblog/settings/model',
                                    method: 'POST',
                                    contentType: 'application/json',
                                    data: JSON.stringify(result.value),
                                    success: function() {
                                        showNotification('AIモデル設定を保存しました。', 'success');
                                        fetchUserBlogs(); // Refresh blog list
                                        Swal.close();
                                    },
                                    error: function() {
                                        Swal.fire('エラー', 'AIモデル設定の保存に失敗しました。', 'error');
                                    }
                                });
                            }
                        });
                    }
                });
            });

            // Fetch Matched Trends Modal
            $(document).on('click', '.fetch-matched-trends-btn', function() {
                const blogId = $(this).data('blog-id');
                const blogName = $(this).data('blog-name');
                console.log(`[Frontend] Clicked "View Cached Analysis" for blogId: ${blogId}, blogName: ${blogName}`);

                Swal.fire({
                    title: `${blogName} のキャッシュされた分析結果`,
                    html: '<div class="text-center my-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">読み込み中...</span></div><p class="mt-2">分析結果を読み込んでいます...</p></div>',
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    didOpen: () => {
                        console.log(`[Frontend] Fetching cached analysis for blogId: ${blogId}`);
                        $.ajax({
                            url: `/api/autoblog/blog/${blogId}/cached-trend-analysis`,
                            method: 'GET',
                            success: function(response) {
                                console.log('[Frontend] AJAX success. Raw response:', response);
                                if (response.success && response.data && response.data.length > 0) {
                                    console.log('[Frontend] Data received, processing results.', response.data);
                                    let resultsHtml = '<div class="list-group">';
                                    response.data.forEach(item => {
                                        const analysis = item.analysisResult || {};
                                        const scoreText = typeof analysis.relevance_score === 'number' ? analysis.relevance_score.toFixed(2) : 'N/A';
                                        const reasoningText = analysis.reasoning || '理由不明';
                                        const angleText = analysis.suggested_angle || '';
                                        const tweetCountDisplay = item.trend && item.trend.tweetCount ? `${item.trend.tweetCount} ツイート` : 'ツイート数不明';
                                        const scrapedAtDisplay = item.trend && item.trend.scrapedAt ? new Date(item.trend.scrapedAt).toLocaleString('ja-JP') : '取得日時不明';
                                        const analyzedAtDisplay = item.analyzedAt ? new Date(item.analyzedAt).toLocaleString('ja-JP') : '分析日時不明';
                                        const isRelevant = analysis.is_relevant;

                                        const resultClass = isRelevant ? 'border-success text-success-emphasis' : 'border-muted text-muted';
                                        const icon = isRelevant ? '<i class="fas fa-check-circle text-success me-2"></i>' : '<i class="fas fa-times-circle text-danger me-2"></i>';
                                        console.log(`[Frontend] Processing item: ${item.trendName}, Relevant: ${isRelevant}, Score: ${scoreText}`);
                                        resultsHtml += `
                                            <div class="list-group-item ${resultClass} mb-2 shadow-sm p-3">
                                                <div class="d-flex justify-content-between align-items-center mb-1">
                                                    <h6 class="mb-0 d-flex align-items-center">${icon}<strong>${item.trendName || 'トレンド名不明'}</strong></h6>
                                                    ${isRelevant ? `<span class="badge bg-success-subtle text-success-emphasis rounded-pill">関連スコア: ${scoreText}</span>` : `<span class="badge bg-secondary-subtle text-secondary-emphasis rounded-pill">スコア: ${scoreText}</span>`}
                                                </div>
                                                <small class="d-block text-body-secondary">トレンド情報: ${tweetCountDisplay} - ${scrapedAtDisplay}</small>
                                                <small class="d-block text-body-secondary">分析日時: ${analyzedAtDisplay}</small>
                                                <p class="mb-1 mt-2 small fst-italic text-body-secondary">${reasoningText}</p>
                                                ${angleText ? `<p class="mb-0 small"><strong class="text-info-emphasis">提案記事アングル:</strong> ${angleText}</p>` : ''}
                                            </div>
                                        `;
                                    });
                                    resultsHtml += '</div>';
                                    Swal.update({
                                        html: resultsHtml,
                                        showConfirmButton: true,
                                        confirmButtonText: '閉じる'
                                    });
                                } else if (response.success && response.data && response.data.length === 0) {
                                    console.log('[Frontend] No cached analysis found for this blog.');
                                    Swal.update({
                                        html: '<div class="alert alert-info text-center"><i class="fas fa-info-circle me-2"></i>このブログには保存されている分析結果はありません。</div>',
                                        showConfirmButton: true,
                                        confirmButtonText: '閉じる'
                                    });
                                } else {
                                    console.log('[Frontend] Failed to load cached analysis. Response:', response);
                                    Swal.update({
                                        html: `<div class="alert alert-danger">キャッシュされた分析結果の読み込みに失敗しました: ${response.message || 'Unknown error'}</div>`,
                                        showConfirmButton: true,
                                        confirmButtonText: '閉じる'
                                    });
                                }
                            },
                            error: function(xhr, status, error) {
                                console.error('[Frontend] AJAX error. Status:', status, 'Error:', error, 'XHR:', xhr);
                                Swal.update({
                                    html: `<div class="alert alert-danger">分析結果の読み込み中にエラーが発生しました: ${error || 'サーバーとの通信に失敗しました。'}</div>`,
                                    showConfirmButton: true,
                                    confirmButtonText: '閉じる'
                                });
                            }
                        });
                    }
                });
            });

            // Force Analysis (ignoring cache)
            $(document).on('click', '.force-analysis-btn', function() {
                const blogId = $(this).data('blog-id');
                const blogName = $(this).data('blog-name');
                analyzedTrendsInModal.clear();
                Swal.fire({
                    title: '強制再分析の確認',
                    html: `<p class="text-center"><i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 2rem;"></i></p><p><strong>${blogName}</strong> のトレンド分析をキャッシュを無視して強制的に再実行します。</p><p class="text-muted small">これにより、OpenAIのAPIが使用され、新しい分析結果が生成されます。</p>`,
                    showCancelButton: true,
                    confirmButtonText: '強制再分析を実行',
                    cancelButtonText: 'キャンセル',
                    confirmButtonColor: '#ffc107',
                }).then((result) => {
                    if (result.isConfirmed) {
                        if (!ws || ws.readyState !== WebSocket.OPEN) {
                            showNotification('リアルタイム接続が確立されていません。再接続を試みています。', 'error');
                            connectWebSocket();
                            Swal.fire('接続エラー', 'リアルタイムサーバーに接続できません。数秒後にもう一度お試しください。', 'error');
                            return;
                        }
                        analysisModalInstance = Swal.fire({
                            title: `<i class="fas fa-sync-alt me-2 text-warning"></i>強制再分析中: ${blogName}`,
                            html: `<div class="text-start"><p class="text-muted small mb-2">キャッシュを無視して、最新のトレンド情報を基に関連性を強制的に再分析しています。</p><div class="progress mb-3" style="height: 5px;"><div id="overallProgress" class="progress-bar progress-bar-striped progress-bar-animated bg-warning" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div></div><div id="analysisStatus" class="mb-3 text-warning"><i class="fas fa-spinner fa-spin me-2"></i>強制再分析を開始しています...</div><div id="analysisResultsContainer" class="list-group" style="max-height: 400px; overflow-y: auto; border: 1px solid #eee; border-radius: .25rem; padding: 10px; background-color: #f8f9fa;"></div></div>`,
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            width: '750px',
                            didOpen: () => {
                                $.ajax({
                                    url: `/api/trendautoblog/match-trends/${blogId}?forceReanalysis=true`,
                                    method: 'GET',
                                    success: function(response) {
                                        console.log('Force re-analysis request successful:', response);
                                    },
                                    error: function(xhr) {
                                        const statusEl = document.getElementById('analysisStatus');
                                        if (statusEl) statusEl.innerHTML = `<i class="fas fa-exclamation-triangle text-danger me-2"></i>リクエストエラー: ${xhr.responseText || 'サーバーとの通信に失敗しました。'}`;
                                        analysisModalInstance.update({
                                            showConfirmButton: true,
                                            confirmButtonText: '閉じる'
                                        });
                                        console.error("Error triggering forced analysis:", xhr.responseText);
                                    }
                                });
                            },
                            willClose: () => {
                                analysisModalInstance = null;
                            }
                        });
                    }
                });
            });

            // Clear Cached Analysis
            $(document).on('click', '.clear-cached-analysis-btn', function() {
                const blogId = $(this).data('blog-id');
                const blogName = $(this).data('blog-name');
                Swal.fire({
                    title: 'キャッシュ削除の確認',
                    html: `<p class="text-center"><i class="fas fa-exclamation-triangle text-danger mb-3" style="font-size: 2rem;"></i></p><p><strong>${blogName}</strong> のキャッシュされた分析結果をすべて削除しますか？</p><p class="text-muted small">この操作は元に戻せません。</p>`,
                    showCancelButton: true,
                    confirmButtonText: '削除する',
                    cancelButtonText: 'キャンセル',
                    confirmButtonColor: '#dc3545',
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: `/api/trendautoblog/cached-analysis/${blogId}`,
                            method: 'DELETE',
                            success: function(response) {
                                if (response.success) {
                                    showNotification(`${response.deletedCount}件のキャッシュされた分析結果が削除されました。`, 'success');
                                    Swal.close();
                                } else {
                                    showNotification('キャッシュの削除に失敗しました: ' + response.message, 'error');
                                }
                            },
                            error: function(xhr) {
                                showNotification('キャッシュの削除に失敗しました。', 'error');
                                console.error("Error clearing cached analysis:", xhr.responseText);
                            }
                        });
                    }
                });
            });

        });

    style.
        .swal2-custom-notification {
            font-size: 0.9rem;
        }
        .form-label.fw-bold {
            font-size: 0.95rem;
        }
        .card-title {
            color: #333;
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
        }
        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }
        .alert-info {
            background-color: #e6f7ff;
            border-color: #b3e0ff;
            color: #005c99;
        }
        .alert-info strong {
            color: #004c80;
        }
