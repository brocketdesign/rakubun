extends ../../base

block mainContent
    .container-fluid.px-0
        .row
            // Sidebar for blogs
            .col-md-3.position-fixed.sidebar.d-flex.flex-column.px-0.m-vh-100
                button#addBlogBtn.btn.btn-sm.btn-outline-primary.shadow-0.btn-block.my-2.mx-auto.w-75
                    i(class="fas fa-plus me-2")
                    | 新しいブログを追加
                ul#blogList.list-group.list-group-flush.mt-1.px-1(style="flex-grow: 1;overflow-y:scroll")


            // Main content area
            #bots-container.col-md-9.offset-md-3.position-fixed.d-none.d-sm-inline.bg-white.m-vh-100(style="overflow-y: scroll;")
                .toolbar.btn-toolbar.py-2.sticky-top.bg-white
                    .toolbar-body.d-flex.justify-content-between.w-100.align-items-center
                        button#close-bots-container.btn.btn-light.d-inline.d-sm-none
                            i.fas.fa-bars
                        h6.mb-0 AI自動化ボット
                        .d-flex 
                            button#addBotBtn.btn.btn-secondary.btn-sm(style="display:none;")
                                i(class="fas fa-plus")
                #botContainer
    #hiddenFormContainer(style="display:none;")
        .container
            form#autoBlogForm(method="post", action="/submit-blog-info" class="needs-validation" novalidate)
                .row.row-cols-1.m-0
                    .col
                        input.blogId(type="hidden", name="blogId")
                        .card.border.shadow-0.rounded-0.mt-1.bg-light.border-0
                            .card-body.px-1.py-0
                                .row
                                    div.form-group.col-12
                                        label.text-muted.text-start(for="blogName", class="form-label") ブログ名:
                                        input#blogName(type="text", name="blogName", required=true class="form-control")
                                        div.invalid-feedback ブログ名は必須です。

                                    div.form-group.col-12
                                        label.text-muted.text-start(for="blogUrl", class="form-label") ブログURL:
                                        .input-group
                                            input#blogUrl(type="text", name="blogUrl", required=true class="form-control")
                                            span.input-group-text(id="openNewPageIcon" style="display: none;")
                                                a(href="#" target="_blank")
                                                    i.fas.fa-external-link-alt
                                        div.invalid-feedback ブログURLは必須です。

                        .card.border.shadow-0.rounded-0.bg-light.border-0
                            .card-body.px-1.py-0
                                .row
                                    div.form-group.col-12
                                        label.text-muted.text-start(for='blogUsername') ユーザー名
                                        input#blogUsername.form-control(name="blogUsername", type='text', placeholder='', required)
                                    div.form-group.col-12
                                        label.text-muted.text-start(for='blogPassword') パスワード
                                        input#blogPassword.form-control(name="blogPassword", type='password', placeholder='', required)

    #hiddenBotFormContainer(style="display:none;")
        form#botForm(method="post", action="/submit-bot-info" class="needs-validation" novalidate)
            .row.row-cols-1.m-0
                .col-12.col-sm-4
                    .card.border.shadow-0.rounded-0.my-2.bg-light.border-0
                        .card-body.px-1
                            .row
                                div.form-group.col-6
                                    label.text-muted.text-start(for="postLanguage", class="form-label") テキストの言語：
                                    select#postLanguage(name="postLanguage" class="form-select")
                                        option(value="japanese") 日本語
                                        option(value="english") 英語
                                        option(value="french") フランス語
                                div.form-group.col-6.d-none
                                    label.text-muted.text-start(for="postgpt", class="form-label") GPT
                                    select#postgpt(name="postgpt" class="form-select")
                                        option(value="gpt4o-mini") GPT-4o-mini
                                        option(value="gpt4o") GPT-4o
                                div.form-group.col-6
                                    label.text-muted.text-start(for="postFrequency", class="form-label") 投稿頻度：
                                    select#postFrequency(name="postFrequency" class="form-select")
                                        option(value="0 0,12 * * *") 1日に2回
                                        option(value="0 * * * *") 1時間ごと
                                        option(value="*/30 * * * *") 30分ごと
                                        option(value="*/10 * * * *") 10分ごと
                                        option(value="0 0 * * *") 毎日
                                        option(value="0 0 * * 0") 毎週
                                div.form-group.col-6
                                    label.text-muted.text-start(for="postStatus", class="form-label") 投稿頻度：
                                    select#postStatus(name="postStatus" class="form-select")
                                        option(value="publish") 公開
                                        option(value="draft") 下書き
                                div.form-group.col-6
                                    label.text-muted.text-start(for="writingStyle", class="form-label") 好みの執筆スタイル：
                                    select#writingStyle(name="writingStyle" class="form-select")
                                        option(value="Descriptive") 記述的
                                        option(value="Informative", selected) 情報的
                                        option(value="Creative") 創造的
                                        option(value="Analytical") 分析的
                                        option(value="Technical") 技術的
                                div.form-group.col-6
                                    label.text-muted.text-start(for="writingTone", class="form-label") 好みの執筆トーン：
                                    select#writingTone(name="writingTone" class="form-select")
                                        option(value="Formal", selected) フォーマル
                                        option(value="Assertive") 断定的
                                        option(value="Humorous") ユーモラス
                                        option(value="Professional") プロフェッショナル
                                        option(value="Emotional") 感情的な

                
                    input.blogId(type="hidden", name="blogId")
                    input#botId(type="hidden", name="botId")
                    .card.border.shadow-0.rounded-0.my-2.bg-light.border-0
                        .card-body.px-1
                            .row
                                div.form-group
                                    label.text-muted.text-start(for="articleLength", class="form-label") 記事の長さ：
                                    select#articleLength(name="articleLength" class="form-select")
                                        option(value="1000") 〜500単語
                                        option(value="2000") 500〜1000単語
                                        option(value="4000") 1000〜2000単語
                                div.form-group
                                    label.text-muted.text-start(for="articleCategories", class="form-label") 記事のカテゴリー：
                                    select#articleCategories(name="articleCategories", multiple=true, class="form-select")
                                        option(value="Technology") テクノロジー
                                        option(value="Travel") 旅行
                                        option(value="Food") 食品
                                        option(value="Health & Fitness") 健康とフィットネス
                                        option(value="Fashion") ファッション
                                        option(value="Lifestyle") ライフスタイル
                                        option(value="Beauty") 美容
                                        option(value="Sports") スポーツ
                                        option(value="Entertainment") エンターテイメント
                                        option(value="Finance") ファイナンス
                                        option(value="Business") ビジネス
                                        option(value="Marketing") マーケティング
                                        option(value="Education") 教育
                                        option(value="Parenting") 育児
                                        option(value="Home & Garden") 家庭とガーデニング
                                        option(value="DIY & Crafts") DIYとクラフト
                                        option(value="Photography") 写真
                                        option(value="Art & Design") アートとデザイン
                                        option(value="Books & Literature") 書籍と文学
                                        option(value="Science") 科学
                                        option(value="History") 歴史
                                        option(value="Politics") 政治
                                        option(value="Nature") 自然
                                        option(value="Pets") ペット
                                        option(value="Relationships") 関係
                                        option(value="Self Improvement") 自己改善
                                        option(value="Spirituality") スピリチュアリティ
                                        option(value="Technology & Gadgets") テクノロジーとガジェット
                                        option(value="Video Games") ビデオゲーム
                                        option(value="Film & TV") 映画とテレビ
                                        option(value="Music") 音楽
                                        option(value="Cooking & Recipes") 料理とレシピ
                                        option(value="Gardening") ガーデニング
                                        option(value="Home Improvement") ホームインプロvement
                                        option(value="Crafts & DIY") クラフトとDIY
                                        option(value="Fashion & Beauty") ファッションとビューティー
                                        option(value="Parenting & Family") 親子関係と家族
                                        option(value="Finance & Money") ファイナンスとお金
                                        option(value="Career & Work") キャリアと仕事
                                        option(value="Education & Learning") 教育と学習
                                        option(value="Health & Wellness") 健康とウェルネス
                                        option(value="Fitness & Exercise") フィットネスとエクササイズ
                                        option(value="Sports & Outdoors") スポーツとアウトドア
                                        option(value="Travel & Adventure") 旅行と冒険
                                        option(value="Art & Creativity") アートと創造性
                                        option(value="Books & Writing") 書籍と執筆
                                        option(value="Science & Technology") 科学と技術
                                        option(value="History & Culture") 歴史と文化
                                        option(value="Politics & Society") 政治と社会
                                        option(value="Nature & Environment") 自然と環境
                                        option(value="Animals & Pets") 動物とペット
                                        option(value="Relationships & Love") 関係と愛
                                        option(value="Self-Improvement & Motivation") 自己改善と動機付け
                                        option(value="Spirituality & Religion") スピリチュアリティと宗教
                                div.form-group
                                    label.text-muted.text-start(for="targetAudience", class="form-label") ターゲットオーディエンス：
                                    select#targetAudience(name="targetAudience[]" multiple class="form-select")
                                        option(value="Men") 男性
                                        option(value="Women") 女性
                                        option(value="Children") 子供
                                        option(value="Teenagers") 十代の若者
                                        option(value="Young Adults") 若者
                                        option(value="Elderly") 高齢者
                                        option(value="Students") 学生
                                        option(value="Professionals") プロフェッショナル
                                        option(value="Parents") 親
                                        option(value="Entrepreneurs") 起業家
                                        option(value="Tech Enthusiasts") テクノロジー愛好家
                                        option(value="Fitness Enthusiasts") フィットネス愛好家
                                        option(value="Food Enthusiasts") 食品愛好家
                                        option(value="Travel Enthusiasts") 旅行愛好家
                                        option(value="Fashion Enthusiasts") ファッション愛好家
                .col-12.col-sm-8
                    .card.border.shadow-0.rounded-0.my-2.bg-light.border-0
                        .card-body.px-1
                            .row
                                div.form-group
                                    label.text-muted.text-start(for="postCategory", class="form-label") 投稿カテゴリー：
                                    select#postCategory(name="postCategory", class="form-select", multiple=true)
                                div.form-group
                                    label.text-muted.text-start(for="botName", class="form-label") ボット名：
                                    input#botName(type="text", name="botName", required=true class="form-control")
                                    div.invalid-feedback ボット名が必要です。
                                div.form-group
                                    label.text-muted.text-start(for="botDescription", class="form-label") ボットの説明：
                                    textarea#botDescription(name="botDescription", required=true class="form-control", rows=7)
                                    div.invalid-feedback ボットの説明が必要です。
    #hiddenImageGenFormContainer(style="display:none;")
        .container
            .row
                .col-md-6.col-12
                    form#imageGenForm(method="post", action="/submit-image-gen" class="needs-validation" novalidate)
                        .row.row-cols-1.m-0
                            .col-12
                                .form-group
                                    label.text-muted.text-start(for="prompt") プロンプト：
                                    textarea#prompt.form-control(name="prompt" row="5" required)
                            .col-12.d-none
                                .form-group
                                    label.text-muted.text-start(for="negativePrompt") ネガティブプロンプト：
                                    input#negativePrompt.form-control(name="negativePrompt")
                            .col-4.d-none
                                .form-group
                                    label.text-muted.text-start(for="aspectRatio") アスペクト比：
                                    select#aspectRatio.form-select(name="aspectRatio")
                                        option(value="16:9") 16:9
                                        option(value="4:3") 4:3
                                        option(value="1:1") 1:1
                            .col-4
                                .form-group
                                    label.text-muted.text-start(for="size") サイズ：
                                    select#size.form-select(name="size" required)
                                        option(value="1024x1024") 1024x1024
                                        option(value="1024x1792") 1024x1792
                                        option(value="1792x1024") 1792x1024

                            .col-4.d-none
                                .form-group
                                    label.text-muted.text-start(for="width") 幅：
                                    input#width.form-control(type="number" name="width" value="712" required max="1024")
                            .col-4.d-none
                                .form-group
                                    label.text-muted.text-start(for="height") 高さ：
                                    input#height.form-control(type="number" name="height" value="512" required max="1024")
                            .col-12.text-start.mt-3
                                button.btn.btn-primary#generateImageButton(type="button") 画像を生成する
                                input.blogId(type="hidden" name="blogId")
                .col-md-6.col-12.text-center
                    #imagePlaceholderContainer
                        p.text-muted.alert-info.text-center.py-2.rounded.d-none(style="font-size:12px;font-weight: 600;") 生成された画像がここに表示されます
                        img.imagePlaceholder(src="/img/placeholder-image.png" alt="生成された画像がここに表示されます" style="max-width: 100%; height: auto;")

    style.
        .b-custom-gradient {
            background: linear-gradient(90.9deg, #4facfe 2.74%, #00f2fe 102.92%);
        }
        label {
            font-size: 12px;
            width: 100%;
        }
        label.text-muted {
            font-size: 11px;
            font-weight: 700;
        }
        .card-body {
            padding-top: 5px;
            padding-bottom: 15px;
        }
        .m-vh-100{
            height: calc(var(--vh, 1vh) * 100 - 75px);
        }
        .custom-editor {
            width: 90%;
        }
        select.form-select {
            appearance: none;
            width: 100%;
            padding: 5px 10px;
            border-radius: 8px;
            border: 1px solid #ccc;
            background-color: #fff;
            background-image: url('data:image/svg+xml;base64,...'); /* Custom dropdown arrow */
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 14px;
            font-size: 16px;
            color: #333;
            transition: border-color 0.3s ease;
        }

        select.form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
            outline: none;
        }

        @media (max-width: 768px) {
            .custom-editor {
                width: 100%;
            }
        }

    script.
        const user = !{JSON.stringify(user)};
        const blogData = !{JSON.stringify(blogData)}
        let botDataLength = 0
        function fetchAndRenderBlogs() {
            $.ajax({
                url: '/api/autoblog//user-blogs',
                method: 'GET',
                success: function(blogData) {
                    const $blogList = $('#blogList');
                    $blogList.empty(); // Clear existing list items
                    
                    blogData.forEach(function(blog) {
                        const botBadgeClass = blog.botCount === 0 ? 'badge-danger' : 'badge-primary';
                        const blogItem = `
                            <li class="list-group-item-action list-group-item rounded border mb-1" data-id="${blog._id}">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <button class="delete-blog-btn badge badge-danger border btn-sm shadow-0 me-2" 
                                            type="button" 
                                            data-id="${blog._id}">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                        <button class="badge badge-light border btn-sm shadow-0 me-2 editBlogBtn" 
                                                type="button" 
                                                data-id="${blog._id}" 
                                                title="編集">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="badge badge-primary border btn-sm shadow-0 me-2" 
                                                type="button" 
                                                onclick="window.open('${blog.blogUrl}', '_blank')" 
                                                title="URL">
                                            <i class="fas fa-link"></i>
                                        </button>
                                        <p class="m-1" style="font-size:14px">
                                            <span class="badge me-2 ${botBadgeClass}">${blog.botCount}</span>
                                            ${blog.blogName.substring(0, 10)}
                                        </p>
                                    </div>
                                    <i class="fas fa-chevron-right"></i>
                                </div>
                            </li>
                        `;
                        $blogList.append(blogItem);
                    });
                },
                error: function() {
                    showNotification('ブログデータを取得できませんでした。', 'error');
                }
            });
        }

        fetchAndRenderBlogs();

        $(document).on('click','.delete-bot-btn', function(e) {
            e.stopPropagation();
            var botId = $(this).data('id'); // Assuming the button's id attribute contains the blogId

            Swal.fire({
                title: '本当に削除しますか？',
                text: "この操作は元に戻せません！",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'はい、削除します！',
                cancelButtonText: 'キャンセル',
                reverseButtons: true,
                showClass: {
                    popup: 'animate__animated animate__fadeIn'
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/api/autoblog/bot/' + botId,
                        type: 'DELETE',
                        success: function(response) {
                            showNotification('削除されました！', 'success');
                            $(`.card[data-id="${botId}"]`).fadeOut();
                        },
                        error: function(xhr, status, error) {
                            showNotification('削除できませんでした', 'error');
                        }
                    });
                }
            });
        });
        $(document).on('click','.delete-blog-btn', function(e) {
            e.stopPropagation();
            var blogId = $(this).data('id'); 

            Swal.fire({
                title: '本当に削除しますか？',
                text: "この操作は元に戻せません！",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'はい、削除します！',
                cancelButtonText: 'キャンセル',
                reverseButtons: true,
                showClass: {
                    popup: 'animate__animated animate__fadeIn'
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/autoblog/blog/${blogId}`,
                        type: 'DELETE',
                        success: function(response) {
                            showNotification(response.message, 'success');
                            fetchAndRenderBlogs();
                        },
                        error: function(xhr) {
                            const errorMessage = xhr.responseJSON?.message || 'Internal server error';
                            showNotification(errorMessage, 'error');
                        }
                    });
                }
            });
        });
        function loadBots(blogId) {
            const loader = $(`
            <div class="d-flex justify-content-center align-items center p-4">
                <div class="spinner-border text-secondary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>`)
            $('#botContainer').html(loader)
            $.ajax({
                url: '/api/autoblog/bots',
                method: 'GET',
                data: { blogId: blogId },
                dataType: 'json',
                success: function(response) {
                    botDataLength = 0
                    if (response.success) {
                        let botsHtml = '';
                        if (response.botData.length == 0) {
                            $('#botContainer').html(`<p class="alert-info mt-2 px-2 py-3 rounded text-center" style="font-size: 12px;">データがありません</p>`);
                            return;
                        }
                        botDataLength = response.botData.length
                        response.botData.forEach(function(bot) {
                            botsHtml += `
                                <div class="col my-2">
                                    <div type="button" class="card bg-white shadow-0 border border-secondary" data-id="${bot._id}">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between mb-1">
                                                <div>
                                                    <span class="badge bg-secondary">
                                                        <i class="fa fa-robot"></i>
                                                        <span class="mx-1 small">${bot.botName}</span>
                                                    </span>
                                                </div>
                                                <div>
                                                    <span class="badge bg-secondary">
                                                        <i class="fa fa-microchip"></i>
                                                        <span class="card-subtitle small mx-1">${bot.postgpt ? bot.postgpt.toUpperCase() : ''}</span>
                                                    </span>
                                                </div>
                                            </div>
                                            <p class="card-text" style="font-size: 12px;">${bot.botDescription ? bot.botDescription.substring(0, 50) : ''}...</p>
                                            <a href="#" type="button" class="btn btn-light border btn-sm shadow-0 me-2 editBotBtn" data-id="${bot._id}" data-blogId="${blogId}" title="編集">
                                                <i class="fas fa-edit"></i>
                                            </a>              
                                            <button class="btn btn-secondary btn-sm shadow-0 mx-2 imageGenButton" data-id="${bot._id}">
                                                <i class="fas fa-image"></i>
                                            </button>                              
                                            <button class="toggle-bot-btn btn btn-primary btn-sm shadow-0 mx-2 toggleBotStatusBtn ${bot.isActive ? '' : 'd-none'}" data-id="${bot._id}" onclick="toggleBotStatus('${bot._id}', false)"><i class="fas fa-toggle-on me-2"></i>ON</button>
                                            <button class="toggle-bot-btn btn btn-warning btn-sm shadow-0 mx-2 toggleBotStatusBtn ${!bot.isActive ? '' : 'd-none'}" data-id="${bot._id}" onclick="toggleBotStatus('${bot._id}', true)"><i class="fas fa-toggle-off me-2"></i>OFF</button>
                                            <button class="btn btn-secondary btn-sm shadow-0 mx-2 startBotBtn" data-id="${bot._id}"><i class="fas fa-play"></i></button>
                                            <a href="/dashboard/app/autoblog?botId=${bot._id}" class="d-none btn btn-secondary btn-sm shadow-0 mx-2"><i class="fa fa-file-alt"></i></a>
                                            <button class="delete-bot-btn btn btn-danger btn-sm shadow-0 float-end mx-2" data-id="${bot._id}"><i class="fas fa-trash-alt"></i></button>
                                        </div>
                                    </div>
                                </div>`;
                        });
                        $('#botContainer').html(botsHtml);
                    } else {
                        console.error('Error:', response.message);
                    }
                },
                error: function(err) {
                    console.error('Error loading bots:', err);
                }
            });
        }

        // Attach loadBots to the blog list items dynamically
        $(document).on('click','#blogList li', function() {
            const blogId = $(this).data('id');
            $('input.blogId').each(function(){$(this).val(blogId)})
            loadBots(blogId);
            $('#addBotBtn').show()
            $(this).addClass('active').siblings().removeClass('active');
            $('#bots-container').removeClass('d-none')
            const updateCategoryList = function(blogId) {
                if($('#postCategory').length == 0){
                    return
                }
                $.ajax({
                    url: '/api/autoblog/info/category/' + blogId,
                    type: 'GET',
                    success: function(categories) {
                        $('#postCategory').html('')
                        for(let category of categories){
                            $('#postCategory').append(`
                                <option value=${category.termId}>${category.name}</option>
                            `)
                        }
                    },
                    error: function(xhr, status, error) {
                        // Handle errors
                        console.error("Failed to fetch blog info:", error);
                    }
                });
            }
            updateCategoryList(blogId);

        });
        $('#close-bots-container').click(function(){$('#bots-container').addClass('d-none')})
        $(document).ready(function() {
            function showBlogForm(title, formHtml, formData = {}) {
                const uniqueId = `bot-form-${Date.now()}`;
                const $form = $(formHtml).attr('id', uniqueId);
                

                Swal.fire({
                    title: title,
                    html: $form,
                    allowOutsideClick: false,
                    showCancelButton: false,
                    showCloseButton: true,
                    confirmButtonText: '送信',
                    focusConfirm: false,
                    customClass: {
                        title: 'fs-6',
                        htmlContainer:'px-0',
                        popup: 'custom-editor bg-light'
                    },
                    showClass: {
                        popup: 'animate__animated animate__fadeIn'
                    },
                    didOpen: () => {
                        if (formData) {
                            $(`#${uniqueId}`).find('input.blogId').val(formData._id || '');
                            $(`#${uniqueId}`).find('#blogName').val(formData.blogName || '');
                            $(`#${uniqueId}`).find('#blogUrl').val(formData.blogUrl || '');
                            $(`#${uniqueId}`).find('#blogUsername').val(formData.blogUsername || '');
                            $(`#${uniqueId}`).find('#blogPassword').val(formData.blogPassword || '');
                            $(`#${uniqueId}`).find('#postLanguage').val(formData.postLanguage || '');
                            $(`#${uniqueId}`).find('#postgpt').val(formData.postgpt || '');
                            $(`#${uniqueId}`).find('#postFrequency').val(formData.postFrequency || '');
                        }
                    },
                    preConfirm: () => {
                        const form = Swal.getPopup().querySelector('form');
                        if (!form.checkValidity()) {
                            Swal.showValidationMessage(`フォームを全て入力してください`);
                            return false;
                        }
                        return $(form).serialize();
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: 'POST',
                            url: '/api/autoblog/blog-info',
                            data: result.value,
                            success: () => {
                                showNotification('情報が更新されました。', 'success');
                                fetchAndRenderBlogs()
                            },
                            error: () => {
                                showNotification('エラーが発生しました。再試行してください。', 'error');
                            }
                        });
                    }
                });
            }

            $('#addBlogBtn').on('click', function() {
                if(blogData.length > 0 && !user.subscriptionStatus){
                    displayUpgradePopup(1)
                    return
                }
                const formHtml = $('#hiddenFormContainer').html();
                showBlogForm('新しいブログを追加', formHtml);
            });

            $(document).on('click','.editBlogBtn', function(e) {
                e.stopPropagation();
                const blogId = $(this).data('id');
                $.get('/api/autoblog/blog-info/' + blogId, (response) => {
                    if (response) {
                        const formHtml = $('#hiddenFormContainer').html();
                        showBlogForm('ブログを編集', formHtml, response);
                    } else {
                        Swal.fire('エラー!', 'ブログデータを取得できませんでした。', 'error');
                    }
                }).fail(() => {
                    Swal.fire('エラー!', 'ブログデータの取得中にエラーが発生しました。', 'error');
                });
            });

            function showBotForm(title, formHtml, formData = {}) {
                const uniqueId = `bot-form-${Date.now()}`;
                const $form = $(formHtml).attr('id', uniqueId);

                Swal.fire({
                    title: title,
                    html: $form,
                    allowOutsideClick: false,
                    showCancelButton: false,
                    showCloseButton: true,
                    confirmButtonText: '送信',
                    focusConfirm: false,
                    customClass: {
                        title: 'fs-6',
                        htmlContainer:'px-0',
                        popup: 'custom-editor bg-light'
                    },
                    showClass: {
                        popup: 'animate__animated animate__fadeIn'
                    },
                    didOpen: () => {

                            if (formData) {
                                console.log(formData.postLanguage)
                                $(`#${uniqueId}`).find('#botId').val(formData._id || '');
                                $(`#${uniqueId}`).find('#botName').val(formData.botName || '');
                                $(`#${uniqueId}`).find('#botDescription').val(formData.botDescription || '');
                                $(`#${uniqueId}`).find('#postCategory').val(formData.postCategory || '');
                                $(`#${uniqueId}`).find('#articleLength').val(formData.articleLength || '');
                                $(`#${uniqueId}`).find('#articleCategories').val(formData.articleCategories || '');
                                $(`#${uniqueId}`).find('#targetAudience').val(formData.targetAudience || '');
                                $(`#${uniqueId}`).find('#postLanguage').val(formData.postLanguage || '');
                                $(`#${uniqueId}`).find('#postgpt').val(formData.postgpt || '');
                                $(`#${uniqueId}`).find('#postFrequency').val(formData.postFrequency || '');
                                $(`#${uniqueId}`).find('#postStatus').val(formData.postStatus || '');
                                $(`#${uniqueId}`).find('#writingStyle').val(formData.writingStyle || '');
                                $(`#${uniqueId}`).find('#writingTone').val(formData.writingTone || '');
                            }
                    },
                    preConfirm: () => {
                        const form = Swal.getPopup().querySelector('form');
                        if (!form.checkValidity()) {
                            Swal.showValidationMessage(`フォームを全て入力してください`);
                            return false;
                        }
                        return $(form).serialize();
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: 'POST',
                            url: '/api/autoblog/bot-info',
                            data: result.value,
                            success: () => {
                                showNotification('情報が更新されました。', 'success');
                                const blogId = $('#blogList li.active').data('id');
                                loadBots(blogId);
                            },
                            error: () => {
                                showNotification('エラーが発生しました。再試行してください。', 'error');
                            }
                        });
                    }
                });
            }
            $('#addBotBtn').on('click', function() {
                if(botDataLength >= 2 && !user.subscriptionStatus){
                    displayUpgradePopup(2)
                    return
                }
                const formHtml = $('#hiddenBotFormContainer').html();
                showBotForm('新しいボットを追加', formHtml);
            });
            $(document).on('click','.editBotBtn, #botContainer .card', function(e) {
                e.stopPropagation();
                const botId = $(this).data('id');
                $.get('/api/autoblog/bot-info/' + botId, (response) => {
                    if (response) {
                        const formHtml = $('#hiddenBotFormContainer').html();
                        showBotForm('ボットを編集', formHtml, response);
                    } else {
                        Swal.fire('エラー!', 'ボットデータを取得できませんでした。', 'error');
                    }
                }).fail(() => {
                    Swal.fire('エラー!', 'ボットデータの取得中にエラーが発生しました。', 'error');
                });
            });
            $(document).on('click', '.startBotBtn', function(e) {
                e.stopPropagation();
                const botId = $(this).data('id');
                const $btn = $(this);
                
                // Add spinner
                $btn.find('i').hide()
                const spinner = $('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');
                $btn.prop('disabled', true).append(spinner);

                startBot(botId, function() {
                    // Remove spinner and enable button
                    $btn.prop('disabled', false);
                    spinner.remove();
                    $btn.find('i').show()
                });
            });

            function startBot(botId, callback) {
                $.ajax({
                    type: 'POST',
                    url: '/api/autoblog/bot-start',
                    data: JSON.stringify({ botId: botId }),
                    contentType: 'application/json',
                    success: function(response) {
                        if (typeof callback === 'function') {
                            callback();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.log('Error:', error);
                        if (typeof callback === 'function') {
                            callback({satus:false,error:error});
                        }
                    }
                });
            }
            $(document).on('click','.toggleBotStatusBtn', function(e) {
                e.stopPropagation();
            });
            $(document).on('click', '.imageGenButton', function(e) {
                e.stopPropagation();
                const botId = $(this).data('id');
                const formHtml = $('#hiddenImageGenFormContainer').html();
                showImageGenForm('画像生成フォーム', formHtml, { blogId: botId });
            });

            function showImageGenForm(title, formHtml, formData = {}) {
                const uniqueId = `image-gen-form-${Date.now()}`;
                const $form = $(formHtml).attr('id', uniqueId);

                if (formData) {
                    $form.find('.blogId').val(formData.blogId || '');
                }

                Swal.fire({
                    title: title,
                    html: $form,
                    allowOutsideClick: false,
                    showCancelButton: false,
                    showCloseButton: true,
                    showConfirmButton: false,
                    customClass: {
                        title: 'fs-6',
                        htmlContainer: 'px-0',
                        popup: 'custom-editor bg-light'
                    },
                    showClass: {
                        popup: 'animate__animated animate__fadeIn'
                    },
                });

                // Handle image generation click event
                $(`#${uniqueId} #generateImageButton`).on('click', async function () {
                    const $button = $(this);
                    const $imagePlaceholder = $(`#${uniqueId} .imagePlaceholder`);

                    if (!document.querySelector(`#${uniqueId} form`).checkValidity()) {
                        Swal.showValidationMessage(`フォームを全て入力してください`);
                        return;
                    }

                    $button.html('<div class="spinner-border spinner-border-sm me-2" role="status"><span class="visually-hidden">Loading...</span></div> 画像を生成する');

                    $imagePlaceholder.attr('src', '/img/placeholder-image-loading.gif');

                    const options = {
                        prompt: $(`#${uniqueId} form`).find('#prompt').val(),
                        negativePrompt: $(`#${uniqueId} form`).find('#negativePrompt').val(),
                        aspectRatio: $(`#${uniqueId} form`).find('#aspectRatio').val(),
                        height: parseInt($(`#${uniqueId} form`).find('#height').val(), 10),
                        width: parseInt($(`#${uniqueId} form`).find('#width').val(), 10),
                        size: $(`#${uniqueId} form`).find('#size').val(),
                        blogId: $(`#${uniqueId} form`).find('.blogId').val()
                    };
                    
                    try {
                        const response = await $.ajax({
                            url: '/api/autoblog/generate-image',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(options),
                            dataType: 'json'
                        });

                        const { imageID, imageBuffer, imageUrl } = response;

                        if(imageBuffer){
                            imageUrl = URL.createObjectURL(new Blob([new Uint8Array(imageBuffer)]));
                        }
                        $imagePlaceholder.attr('src', imageUrl);
                    } catch (error) {
                        console.error('Error generating image:', error);
                        showNotification('画像の生成中にエラーが発生しました。再試行してください。', 'error');
                    } finally {
                        // Remove the spinner and restore the button text
                        $button.html('画像を生成する');
                    }
                });
            }

        });


        function toggleBotStatus(botId, newState) {
            fetch(`/api/autoblog/bot-info/ `, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ botId: botId, isActive: newState }),
            })
            .then(response => response.json())
            .then(data => {
                $(`.toggle-bot-btn[data-id="${botId}"]`).each(function() {
                    $(this).toggleClass('d-none');
                });        
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }
        function getUserInfo(callback){
                $.ajax({
                    type: 'GET',
                    url: '/user/user-info',
                    contentType: 'application/json',
                    success: function(response) {
                        if (typeof callback === 'function') {
                            callback(response);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        if (typeof callback === 'function') {
                            callback();
                        }
                    }
                });

        }
        function displayUpgradePopup(messageCode) {
            let message;

            switch(messageCode) {
                case 1:
                    message = "新しいブログを追加するには、プレミアムプランにアップグレードする必要があります。";
                    break;
                case 2:
                    message = "新しい機能を利用するには、プレミアムプランへのアップグレードが必要です。";
                    break;
                default:
                    message = "アップグレードが必要です。";
                    break;
            }

            Swal.fire({
                html: `
                    <img class="logo mx-2" src='/img/logo.png' alt='ロゴ' style="max-width: 30px;" >
                    <span> RAKUBUN </span>
                    <h3>アップグレードが必要です</h3>
                    <p class="text-muted small">${message}</p>
                    <div class="container">
                        <ul class="list-group small text-start">
                            <li class="list-group-item" style="font-size:12px;">
                                <i class="fa fa-check text-primary me-3"></i>ChatGPT-4oおよびChatGPT-4o-miniを利用可能
                            </li>
                            <li class="list-group-item" style="font-size:12px;">
                                <i class="fa fa-check text-primary me-3"></i>利用制限: 無制限
                            </li>
                            <li class="list-group-item" style="font-size:12px;">
                                <i class="fa fa-check text-primary me-3"></i>複数ブログの追加が可能
                            </li>
                            <li class="list-group-item" style="font-size:12px;">
                                <i class="fa fa-check text-primary me-3"></i>各ブログに複数ボットを作成可能
                            </li>
                        </ul>
                    </div>
                `,
                showConfirmButton: false,
                position: 'bottom-center',
                showClass: {
                    popup: 'animate__animated animate__slideInUp'
                },
                hideClass: {
                    popup: 'animate__animated animate__slideOutDown'
                },
                footer: '<a href="/payment/subscription" class="btn b-custom-gradient text-white">プレミアムプランにアップグレード</a>'
            });
        }
        function showNotification(message, icon) {
            Swal.fire({
                position: 'top-end',
                icon: icon,
                title: message,
                showConfirmButton: false,
                timer: 3000,
                toast: true,
                customClass: {
                    title: 'swal2-custom-title',
                    popup: 'swal2-custom-popup'
                },
                showClass: {
                    popup: 'animate__animated animate__slideInRight'
                },
                hideClass: {
                    popup: 'animate__animated animate__slideOutRight'
                }
            });
        }